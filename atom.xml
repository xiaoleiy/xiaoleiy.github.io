<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoleiY</title>
  
  <subtitle>Familiar conversations from unfamiliar perspective.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-04T13:38:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XiaoleiY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无障碍使用Google搜索</title>
    <link href="http://yoursite.com/2017/11/07/access-google-withoutvpn/"/>
    <id>http://yoursite.com/2017/11/07/access-google-withoutvpn/</id>
    <published>2017-11-07T13:18:35.000Z</published>
    <updated>2017-11-04T13:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>可能很多人和笔者一样，自己有购买过VPN，访问某些网站和应用的时候会把VPN打开， 如果VPN有流量限制，访问完之后还要将VPN关掉。如果你用的VPN不稳定，可能还需要多次更换主机；而笔者在自己日常工作中发现，几乎有90%的需求都是用Google搜索，有时候想迅速搜到想要的结果，以解决纠缠了很久的问题。这种时候，如果能够无障碍的快速访问Google，那简直是再高效不过的了。今天介绍一种无需VPN快速使用Google搜索的方法。<br><a href="https://nova.rambler.ru" target="_blank" rel="external">https://nova.rambler.ru</a> 是一个俄罗斯的搜索引擎网站，它内部将搜索操作重定向到Google去完成的，因此，它更像是一个代理，其搜索结果也就和Google的一模一样。借助这个网站，我们可以做一些简单的定制，在不需要VPN的情况下，简单快速的使用Google搜索。</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>打开浏览器，访问 <a href="https://nova.rambler.ru/search?query=test&amp;lang=en" target="_blank" rel="external">https://nova.rambler.ru/search?query=test&amp;lang=en</a> 进入Rambler的搜索页面，这里，我们用“test”作为搜索关键字。</li><li>Chrome浏览器下在页面右下角，点击按钮 <strong>Search Settings</strong> 打开搜索定制对话框，可以选择单页显示搜索结果排序方法、结果条数，以及搜索过滤政策；   <img src="/2017/11/07/access-google-withoutvpn/search-settings.png" alt="搜索设置" title="搜索设置">    </li><li>设置为浏览器默认搜索引擎（以Chrome为例，其他浏览器类似）：进入搜索引擎设置窗口（Chrome中访问<a href="chrome://settings/searchEngines" target="_blank" rel="external">chrome://settings/searchEngines</a> 即可），点击按钮 <strong>添加</strong> 来新增一个搜索引擎，在 <strong>网址</strong> 一栏输入该URL：<a href="https://nova.rambler.ru/search?query=%s&amp;lang=en" target="_blank" rel="external">https://nova.rambler.ru/search?query=%s&amp;lang=en</a> ；将新增的搜索引擎设置为默认搜索引擎。这样，在浏览器输入拦输入关键字就可以完成搜索了。   <img src="/2017/11/07/access-google-withoutvpn/set-default-searchengine.png" alt="配置默认搜索引擎" title="配置默认搜索引擎">    </li></ol><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><h5 id="搜索结果页面去广告"><a href="#搜索结果页面去广告" class="headerlink" title="搜索结果页面去广告"></a>搜索结果页面去广告</h5><p>由于该搜索引擎结果页面中带有广告，且结果条目预览宽度较窄，Chrome浏览器里，我们可以安装Stylish插件，然后做如下简单的CSS定制，即可去除广告，且让搜索结果预览更多的文字。<br>    google_ads_frame1 { display: none; }<br>    .l-main, .l-null { width: 950px; }<br>    .l-aside { display: none; }<br>这是去除广告之后的页面效果：<br>    <img src="/2017/11/07/access-google-withoutvpn/search-results-wo-ads.png" alt="去除广告" title="去除广告">    </p><h5 id="手机浏览器上使用Google搜索"><a href="#手机浏览器上使用Google搜索" class="headerlink" title="手机浏览器上使用Google搜索"></a>手机浏览器上使用Google搜索</h5><p>手机端浏览器，可以访问<a href="https://m.search.rambler.ru/search?query=test" target="_blank" rel="external">https://m.search.rambler.ru/search?query=test</a>来进行搜索，但是貌似手机端的语言请求参数 <code>lang=en</code> 并不生效；支持自定义搜索引擎的浏览器，可以使用<a href="https://m.search.rambler.ru/search?query=test" target="_blank" rel="external">https://m.search.rambler.ru/search?query=%s</a>作为默认索索URL；</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;可能很多人和笔者一样，自己有购买过VPN，访问某些网站和应用的时候会把VPN打开， 如果VPN有流量限制，访问完之后还要将VPN关掉。如果你用的VPN不稳定，可能还需要多次更换主机；而笔者在自己日常工作中发现，几乎有90%的需求都是用Google搜索，有时候想迅速搜到想要的结果，以解决纠缠了很久的问题。这种时候，如果能够无障碍的快速访问Google，那简直是再高效不过的了。今天介绍一种无需VPN快速使用Google搜索的方法。&lt;br&gt;&lt;a href=&quot;https://nova.rambler.ru&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nova.rambler.ru&lt;/a&gt; 是一个俄罗斯的搜索引擎网站，它内部将搜索操作重定向到Google去完成的，因此，它更像是一个代理，其搜索结果也就和Google的一模一样。借助这个网站，我们可以做一些简单的定制，在不需要VPN的情况下，简单快速的使用Google搜索。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://yoursite.com/categories/Tools/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker、Ambari部署大数据集群环境（续）- 大数据集群服务安装部署</title>
    <link href="http://yoursite.com/2017/11/04/introduction-ambari-setup-on-docker-2/"/>
    <id>http://yoursite.com/2017/11/04/introduction-ambari-setup-on-docker-2/</id>
    <published>2017-11-04T13:42:20.000Z</published>
    <updated>2017-11-04T13:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇，本文继续讲述如何基于Docker容器采用Ambari完成大数据环境的搭建。首先，除了上一篇用来安装Ambari软件包的容器（作为Master节点）之外，还要创建其他几台Docker容器，作为Agent节点；本文不覆盖Docker技术本身，但是对创建的Docker容器有如下要求：每个Docker容器赋予一个固定IP，避免容器重启之后IP被动态分配，导致集群节点之间无法通信；</p><a id="more"></a><h3 id="配置Master、Agent节点之间的SSH证书认证"><a href="#配置Master、Agent节点之间的SSH证书认证" class="headerlink" title="配置Master、Agent节点之间的SSH证书认证"></a>配置Master、Agent节点之间的SSH证书认证</h3><ol><li>Agent容器上，开启root用户登录权限<ul><li>登录Agent容器，执行命令<code>passwd root</code> 设置root用户的密码；</li><li>用vi编辑 <code>/etc/ssh/sshd_config</code> 文件，修改属性 PermitRootLogin 属性为yes，改为：<code>PermitRootLogin  yes</code></li><li>在所有Agent容器上执行相同的上述操作</li></ul></li><li>Master容器上，生成SSH证书<ul><li>登录Master容器，在<code>/etc/hosts</code>文件中，以FQDN（Fully Qualified Domain Name）的形式追加Master及所有Agent机器的主机名及IP地址映射，参考如下（第二列为Agent的域名，自定义即可；第三列为Agent的hostname，创建Docker容器时生成）：<pre><code>172.17.0.2    ambari_master   7f4584bdc01d172.17.0.4    ambari_agent01    0c3438ea3089172.17.0.5    ambari_agent02    8b8312c4fe15</code></pre></li><li>执行命令 <code>ssh-keygen</code>，输入参数均默认即可，执行完成之后会在 <code>~/.ssh/</code> 目录下生成一对SSH认证证书，包含公钥和私钥2个文件：id_rsa、id_rsa.pub</li><li>在<code>~/.ssh/config</code>文件（如果没有则手动创建即可）中添加如下配置，以指定连接Agent的私钥：<pre><code>Host 172.17.0.4   IdentitiesOnly yes   IdentityFile ~/.ssh/id_rsa Host 172.17.0.5   IdentitiesOnly yes   IdentityFile ~/.ssh/id_rsa ControlMaster auto ControlPath /tmp/%r@%h:%p</code></pre></li><li>执行命令<code>scp ./id\_rsa.pub root@172.17.0.4:~/</code> 将公钥文件传输到所有Agent机器上</li></ul></li><li>Agent容器上，配置SSH公钥<ul><li>登录Agent容器，如果没有<code>~/.ssh</code>目录则创建，在root根目录下执行命令 <code>cat ./id\_rsa.pub  &gt; ~/.ssh/authorized_keys</code>，完成公钥的配置</li><li>在<code>/etc/hosts</code>文件中，以FQDN（Fully Qualified Domain Name）的形式追加Master及所有Agent机器的主机名及IP地址映射，参考如下：<pre><code>172.17.0.2    ambari_master   7f4584bdc01d172.17.0.4    ambari_agent01    0c3438ea3089172.17.0.5    ambari_agent02    8b8312c4fe15</code></pre></li><li>在所有Agent容器上执行上述操作</li><li>在Ambari安装过程中，Master容器会携带自己的私钥，通过scp/ssh/sftp的方式向Agent容器传输文件，并且执行命令</li></ul></li></ol><h3 id="Agent容器完成Java-ntp-的安装"><a href="#Agent容器完成Java-ntp-的安装" class="headerlink" title="Agent容器完成Java / ntp 的安装"></a>Agent容器完成Java / ntp 的安装</h3><p>参考<a href="https://xiaoleiy.github.io/2017/09/27/introduction-ambari-setup-on-docker/#more" target="_blank" rel="external">上一篇文章</a>安装Java和ntp服务。</p><h3 id="安装Hadoop集群环境"><a href="#安装Hadoop集群环境" class="headerlink" title="安装Hadoop集群环境"></a>安装Hadoop集群环境</h3><p>登录 Amarbi 首页，点击“Launch Install Wizard”进入Hadoop集群环境安装指导；<br></p><p>按照如下指导步骤，完成环境安装：</p><ol><li><em>Getting Started</em> 输入该集群环境的名字，点击“Next”进入下一步；</li><li><em>Select Version</em> 选择HDP版本，HDP是 Hortonworks 开发的Hadoop大数据基础套件，由于它集成了Hadoop/Spark/Flume等诸多组件，因此给开发者带来了很大方便；笔者选择的是HDP最新版本 HDP 2.6.2.0，软件仓库选择“Use Public Repository”，这样在安装过程中， Ambari 会从远程软件仓库下载各组件安装包。点击“Next”进入下一步；</li><li><em>Install Options</em> Target Hosts 一栏，输入Agent容器的hostname，每行一个；Host Registration Information 一栏，上传Master容器内创建的SSH密钥文件，便于Master远程通过密钥向各个Agent机器安装HDP套件；点击“Next”进入下一步；</li><li><em>Confirm Hosts</em> 等待所有Agent机器都完成安装；如果安装失败，点击状态列可以查看日志，以找到具体原因；Ambari会进入各Agent容器去检查服务、目录等安装配置情况，可以点击“Click to see the warnings”以确认具体配置问题，并做修复。 <img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Confirm-Hosts.jpg" alt="集群节点确认页面" title="集群节点确认页面"> 确认安装完成且无配置问题之后，点击“Next”进入下一步；</li><li><em>Choose Services</em>  选择需要安装的组件，组件之间存在依赖关系，Ambari会自己识别，如果被依赖组件没有选择，在点击“Next”的时候他会提示是否选择。点击“Next”进入下一步；</li><li><em>Assign Masters</em> 为各个组件选择Master节点，笔者当前按照Ambari默认选择即可，点击“Next”进入下一步；</li><li><em>Assign Slaves and Clients</em> 为各个组件选择Slave节点已经客户端，笔者当前按照Ambari默认选择即可，点击“Next”进入下一步；</li><li><em>Customize Services</em> 完成各组件的参数配置修改，Ambari会将需要配置的组件标记出来，点击对应页签之后，手动修改属性，基本上都是数据库或服务密码。需要关注的是，Hive的数据库需要选择已存在于Master节点上的MySQL数据库，并输入对应密码。 <img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Customize-Services.jpg" alt="服务配置页面" title="服务配置页面">     完成属性修改之后，点击“Next”进入下一步；</li><li><em>Review</em> 确认上一步的各组件参数配置，点击“Next”进入下一步；</li><li><em>Install, Start and Test</em> 开始安装，Ambari会在各个Agent节点上同时安装各组件<img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Install-Start-and-Test.jpg" alt="启动服务安装" title="启动服务安装">    点击链接可查看当前安装进展，如下图：<img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Install-Details.png" alt="服务安装详情查看" title="服务安装详情查看">    点击正在安装的组件条目，还可以查看日志路径，以及当前输出的日志信息；安装完成之后，Ambari会启动所有服务，并测试是否成功，这个过程中，如果出现异常或告警，也会在最后显示出来，以便我们自己进行核对修正。<img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Install-Review.png" alt="服务安装结果核对" title="服务安装结果核对">点击“Next”进入下一步；</li><li><em>Summary</em> 对于之前的服务安装、启动、测试情况进行汇总显示<img src="/2017/11/04/introduction-ambari-setup-on-docker-2/Install-Start-Test-Summary.png" alt="服务安装、启动、测试完成" title="服务安装、启动、测试完成">点击“Complete”完成安装；</li></ol><p>完成安装之后，Ambari会引导进入Dashboard管理页面，可以进行各服务、集群节点等的管理；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇，本文继续讲述如何基于Docker容器采用Ambari完成大数据环境的搭建。首先，除了上一篇用来安装Ambari软件包的容器（作为Master节点）之外，还要创建其他几台Docker容器，作为Agent节点；本文不覆盖Docker技术本身，但是对创建的Docker容器有如下要求：每个Docker容器赋予一个固定IP，避免容器重启之后IP被动态分配，导致集群节点之间无法通信；&lt;/p&gt;
    
    </summary>
    
      <category term="Techs" scheme="http://yoursite.com/categories/Techs/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Ambari" scheme="http://yoursite.com/tags/Ambari/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker、Ambari部署大数据集群环境 - Ambari套件安装</title>
    <link href="http://yoursite.com/2017/09/27/introduction-ambari-setup-on-docker/"/>
    <id>http://yoursite.com/2017/09/27/introduction-ambari-setup-on-docker/</id>
    <published>2017-09-27T12:42:08.000Z</published>
    <updated>2017-09-27T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ambari是Apache的开源项目，它帮助用户在GUI页面上简单的部署、管理、监控Hadoop集群环境。Ambari支持的Hadoop组件包括HDFS、Hive、HBase、Spark、Yarn等，HortonWorks官方也是采用Ambari来完成自家HDP套件的安装、管理及监控的。除了预置的组件之外，Ambari还支持自定义组件的安装，同时，支持RESTful的API，继而可以通过命令行等方式调用Ambari来完成一些自动化的任务。</p><p>本文共分为两部分，第一部分介绍如何在Docker虚拟化环境中部署Ambari；第二部分介绍如何基于Ambari来部署和管理Hadoop集群。</p><a id="more"></a><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul><li>Docker发行版：Docker for Mac</li><li>Docker版本：17.06.2-ce</li><li>Docker容器OS：Ubuntu 14.04</li><li>Ambari版本：2.5.2.0</li></ul><h3 id="Docker环境准备"><a href="#Docker环境准备" class="headerlink" title="Docker环境准备"></a>Docker环境准备</h3><ol><li>拉取Docker镜像：在宿主机上执行命令 <code>docker pull ubuntu:14.04</code> 从远端仓库中获取Ubuntu的镜像，也可以获取其他OS的镜像，本文以Ubuntu为例</li><li>启动Docker容器：执行如下命令，以ubuntu:14.04镜像为基础启动容器：<pre><code>docker run -itd --name ambari_new -p 8080:8080 -p 3306:3306 -v /Users/yuxiaolei/Workspace/dockerShared:/dockerShared ubuntu:14.04 /bin/bash</code></pre></li></ol><p>由于Ambari启动Web程序的时候占用8080端口，因此要从Docker宿主机上访问Ambari页面，需要通过参数 -p 来制定端口映射；<br>作为新手，笔者在容器内部署好Ambari之后，才发现Web页面的8080端口和MySQL的3306端口（可选）没有暴露给Docker宿主机，也就没法从宿主机上通过浏览器来登陆Ambari，因此必须想办法在已有容器上开放端口。</p><p>有两个方法：<br>1）如果宿主机为Linux系统，则修改iptables防火墙来指定端口映射规则；<br>2）如果是非Linux系统，可以将已装Ambari的容器commit为新的镜像，再基于该镜像创建新的容器。此时，就可以在 <code>docker run</code> 命令中添加参数 -p 来指定端口映射了。</p><p>还有一个问题，Ambari将其数据存储在数据库中，支持MySQL、PostgreSQL等数据库；容器内安装MySQL之后，基于上一步创建的新容器里，会发现MySQL启动不起来，执行命令 <code>/etc/init.d/mysql restart</code> 启动失败，在 <code>/var/log/mysql/error.log</code> 日志文件中打印有 <code>170802 14:02:59 [ERROR] Fatal error: Can&#39;t open and lock privilege tables: Got error 140 from storage engine</code> 的错误，经过网上查资料，需要在创建容器的时候添加参数 <code>-v /var/lib/mysql</code> 将MySQL数据存储路径声明为数据卷，即可解决问题。<br>启动容器之后，执行命令 <code>docker exec -it ambari /bin/bash</code> 进入容器内部。</p><h3 id="Ambari安装"><a href="#Ambari安装" class="headerlink" title="Ambari安装"></a>Ambari安装</h3><ol><li><p>配置Ubuntu的软件仓库源：<br> 国内建议采用阿里云的软件源，在root账号下用vim打开<code>/etc/apt/sources.list</code>文件，删除文件所有内容，粘贴如下内容：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</div></pre></td></tr></table></figure><p> 执行命令 <code>apt-get update</code> 完成软件列表更新</p></li><li><p>安装Ambari所依赖的软件</p><ul><li><p><strong>Oracle JDK：</strong> 逐条执行如下命令，以添加WebUpd8团队（<a href="https://launchpad.net/~webupd8team/+archive/ubuntu/java" target="_blank" rel="external">https://launchpad.net/~webupd8team/+archive/ubuntu/java</a>）提供的Oracle JDK仓库源，并从该仓库安装JDK：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt-get install software-properties-common</div><div class="line">sudo add-apt-repository ppa:webupd8team/java</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install oracle-java8-installer</div><div class="line">sudo apt-get install oracle-java8-set-default</div></pre></td></tr></table></figure><p>  完成安装之后，在 ~/.bashrc 文件末尾添加命令 <code>export JAVA_HOME=/usr/lib/jvm/java-8-oracle</code> 以配置JAVA_HOME 环境变量。</p></li><li><p><strong>MySQL：</strong> 执行命令 <code>apt-get install mysql-server</code> 安装MySQL服务器，安装完成后执行命令 <code>mysql -uroot -proot</code> 进入MySQL客户端，执行如下SQL代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> ambari;</div><div class="line"><span class="keyword">use</span> ambari;</div><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'root_password'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</div><div class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</div><div class="line">exit;</div></pre></td></tr></table></figure><p>  由于Ambari的数据存储在MySQL数据库中，这里为Ambari单独创建了database，并为其赋了完全控制权限；说明：假设MySQL数据库root用户的密码为：root_password<br>  修改 <code>/etc/mysql/my.conf</code>，将<code>skip-external-locking</code>注释掉，并确保 <code>bind-address = 0.0.0.0</code> 配置，以使MySQL可被远程主机访问。<br>  执行命令<code>/etc/init.d/mysql restart</code>重启MySQL 服务。</p></li><li><p><strong>时间同步服务器ntp：</strong> 执行命令 <code>apt-get install ntp</code>  安装ntp时间同步服务器，以便于集群环境中各节点的时钟一致；执行命令 <code>sudo service ntp restart</code>  重启ntp服务。</p></li></ul></li><li><p>下载Ambari仓库文件</p><ul><li>进入 <code>cd /etc/apt/sources.list.d</code> 目录，执行命令 <code>wget http://public-repo-1.hortonworks.com/ambari/ubuntu14/2.x/updates/2.5.2.0/ambari.list</code> 从HortonWorks仓库中下载Ambari源文件，下载后切勿修改list文件名；</li><li>执行命令 <code>apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B9733A7A07513CAD</code> 以信任远端仓库的GPG签名</li><li>执行命令 <code>apt-get update</code> 更新Ambari软件源</li><li>执行命令 <code>apt-get install ambari</code> 安装Ambari套件，由于软件包较大（700多MB），这里情耐心等待，不过apt-get支持断点下载，网络终端后重新执行命令时不会从零开始下载</li></ul></li><li>配置Ambari：<ul><li>执行命令 <code>mysql -uroot -proot</code> 进入MySQL客户端，执行命令 <code>source ambari</code> 进入ambari的数据库，并执行命令 <code>source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</code> 来完成Ambari的数据库表初始化操作；</li><li>执行命令 <code>ambari-server setup</code> 启动Ambari的引导式配置操作，根据指导做配置即可。需要注意的是，JDK不要选择由Ambari从网络下载，应该选择自定义路径，然后输入 <code>/usr/lib/jvm/java-8-oracle</code>  即可；</li></ul></li><li>启动Ambari：执行命令<code>ambari-server start</code>，启动日志存储路径为 <code>/var/log/ambari-server/ambari-server.log</code></li><li>启动之后，由于我们之前做了Docker容器的端口映射，因此可以在宿主机上打开浏览器输入 <a href="http://localhost:8080/" title="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 即可访问Ambari登陆页面</li><li>登陆用户名和密码均为admin，登陆之后就可以看到Ambari的首页了，如下图： <img src="/2017/09/27/introduction-ambari-setup-on-docker/DraggedImage.png" alt="Ambari首页" title="Ambari首页"></li></ol><p>下一篇文章会介绍Ambari分布式环境配置和管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ambari是Apache的开源项目，它帮助用户在GUI页面上简单的部署、管理、监控Hadoop集群环境。Ambari支持的Hadoop组件包括HDFS、Hive、HBase、Spark、Yarn等，HortonWorks官方也是采用Ambari来完成自家HDP套件的安装、管理及监控的。除了预置的组件之外，Ambari还支持自定义组件的安装，同时，支持RESTful的API，继而可以通过命令行等方式调用Ambari来完成一些自动化的任务。&lt;/p&gt;
&lt;p&gt;本文共分为两部分，第一部分介绍如何在Docker虚拟化环境中部署Ambari；第二部分介绍如何基于Ambari来部署和管理Hadoop集群。&lt;/p&gt;
    
    </summary>
    
      <category term="Techs" scheme="http://yoursite.com/categories/Techs/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Ambari" scheme="http://yoursite.com/tags/Ambari/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>从“寻找加西亚”说起</title>
    <link href="http://yoursite.com/2017/09/16/say-goodbye-to-huawei/"/>
    <id>http://yoursite.com/2017/09/16/say-goodbye-to-huawei/</id>
    <published>2017-09-16T14:02:07.000Z</published>
    <updated>2017-09-16T14:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近华为内部因为NaturalUI抄袭AdminUI事件，延伸出来一些有趣的事情，先是老板专门发文要求对爆出该事件的兄弟连升两级，并要求无线产品线总裁保护，避免遭受打击报复；接着是隔天发文摘录心声文章“寻找加西亚”，鼓励公司向优秀人才学习（而不纠结于人才的缺点），这里说的是西研所2015年OpenStack内源贡献者孔令贤连升三级后不堪压力离职的事情。</p><p>翻到了孔令贤的博客，他当时是基层主官，技术敏感度逐渐下降，基于对公司连升三级后带来前所未有的压力，再加上母亲离世，造成了最终离职的结果，移民新西兰加入了云计算公司Catalyst IT，和妻子、出生不到1岁的儿子过着悠闲的生活。</p><p>从孔令贤的文章中可以看到，他是个有技术追求，同时又不对生活妥协的人，家庭和生活质量是不可缺少的。这一点，和我还有点像，早知道自己不可能在华为这样的公司一直待下去，也因为雾霾、教育、城市管理等生活质量差的切腹体验，有过移民国外的想法，至少给孩子一个好的成长环境。</p><p>现如今，经历了华为六年，我也站在了下一站的路口，国庆后就要离开华为了。回首这六年，从来没有认认真真的写过什么，都是在忙忙碌碌的前进；此时，有一种补偿自己，记录下所有经历的冲动。在华为度过了最年轻的年华，从2011年8月8日到2017年10月11日，从23到29岁，从青葱未懂到准爸爸，人生最美好的一段时间就这么匆匆流过，像极了无数次梦里的情景，跑啊跑，追啊追，也不知道在追什么，但是脚步却永远使不上力气，所谓<strong>心有不甘</strong>。</p><p>一路走过华为6年，撸过了各种架构的Java后台系统、MySQL数据库性能优化、前端开发、大数据开发和Spark性能优化；面对过各种压力，带领从各种公司进入的新员工做项目开发，每天晚上10点以后下班，半夜做梦都在写代码讨论问题；参与挑战项目，1个月时间内4个人完成分布式架构的迁移，每晚10点开会过进展，每周六例行加班；一次又一次，都是艰难的磨炼，也正是因为连续不断的挑战，才让我实实在在的体会到如何写好代码、如何做好产品。</p><p>在这个过程中，也逐渐认识到，在华为（在这个部门），技术人员的发展通道其实是很窄的，你除了技术能力好，还要会写材料，还要能和各种角色沟通博弈，还要对团队能力负责任。当然，当这些你都做到了，你还要等机会，不比管理岗位，高级的技术岗位比较稀少，很多人在华为待了十来年还在一线写代码，而和他同时期入职的人，可能已经当了X级部门的大领导。高级的技术岗位，又都是不写代码、不关注模块设计的人，他们绝大部分的工作是开会和写材料，他们更多关注的是方案和整体设计，侃侃而谈的都是价值和眼界。最近两年，每次沟通领导都会给我讲，你的技术没问题，能够独当一面，但是要建立你的影响力，这让我很为难，是真的很为难。我自认为是达不到公司高级技术岗位的要求的，我只是偏爱一些高效率的工具，喜欢关注大家都在玩的新技术（动不动也自己折腾一番），也喜欢踏踏实实的攻破技术难题，将自己觉得好的想法付诸于产品中，这也算是自己的价值所在。当然，我并不是唯技术论者，对于产品要解决的客户问题，以及怎么样更好的解决问题，我也是颇有兴趣的。技术可以帮助你踏入行业的门槛，而业务可以让你走的更远，业务不枯燥不繁杂，理解业务和客户，那么你就能洞察这个领域的本质规律，技术上需要1人月解决的问题，可能你在业务上的另一套方案3天就能解决问题，因此价值所在也是不言而喻。另外，团队协作和管理也是一个不可避过的话题，华为的基层主管（PL、PM）是很累的，不仅因为业务复杂，一个大的部门里，有各种各样的角色，各类繁杂冗长的流程，都需要你来协调处理，你还要抱有一份“私心”，多争取一些出彩的机会给自己团队，这样才能有好的绩效。当然这也是大公司保持高产出所应有的代价，用流程来保障组织运作起来，用KPI来驱动员工永不停止的提升产出。我所向往的 好的团队协作和管理，不是刻意的、流程化的机械运作，而是团队主动营造的氛围，吸引大家发挥自己的潜力。大家的动机，不是因为KPI在后面追赶，而是前方更好玩更有挑战的难题。</p><p>在那么多艰难的日子里，曾经对华为有很多的不爽，但真到了我要离开的时候，却又有很多对它的肯定和赞许，希望利润率能够有所提高，在智能时代里，追赶上别人的脚步。</p><p>后面的路途，没有了外部的高压环境，看似舒适，其实是逃离了舒适区之后的无人区，所有的约束都是自己给的，没有约束，就会随欲望漂泊，没有方向，也会浪费太多时间。要保持对技术的敏感度，不断学习新的东西并付诸于实践；还要生活规律，保持每周锻炼身体不间断；还要多看科技和经济领域的书籍，作为长远发展的基石；</p><p>这是一场自己和自己的搏斗，准备好上路吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近华为内部因为NaturalUI抄袭AdminUI事件，延伸出来一些有趣的事情，先是老板专门发文要求对爆出该事件的兄弟连升两级，并要求无线产品线总裁保护，避免遭受打击报复；接着是隔天发文摘录心声文章“寻找加西亚”，鼓励公司向优秀人才学习（而不纠结于人才的缺点），这里说的是
      
    
    </summary>
    
    
  </entry>
  
</feed>
